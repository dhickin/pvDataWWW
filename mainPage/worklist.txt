
STATUS AND ACTIVITIES
Last update 9-Jan-2013. 

Status of this document. Presently the document lists mainly incomplete activities
that are part of the 2011-2012 charter, rather than new activities related to
pvDatabase, big data etc. In a future draft this document will attempt to list all
activities, their status, and the status of the software themselves.


INCOMPLETE ACTIVITIES (not including AIs)
==========================================
The following are ongoing activities and those required by the 2011-2012 charter,
which are incomplete.
 
CORE
----
1. Directory Service - not finished - no user guide documentation (RL)

2. easyPVA - not finished, & cpp & java not equally implemented (MS)
   Estimate: java 1 wk, cpp 3 wks. MK thinks more.

3. gather - finished? I don't think it's used anywhere. What is the state of the
   gather example? No bpm service. (MK)

4. v3channel - finished? Not verified, not properly documented. I think this can't be
   said to be finished until it is documented as part of a serious v3-v4 interop
   doc. (MK)

5. v3-v4 interop user guide. Not started. We have just a kinda description from Marty
   about the difference between processing in the two of them. Nothing concrete you
   can give an engineer that says "this is a guide to the interoperation of EPICS V3
   and V4" (DH)

6. vxWorks port - not finished. Beta 2 not started. How should this fit into plan to
   remove database from pvIOC? My feeling is the objective should be a very clean and
   small extract of the present pvIOC should be ported to vxWorks. Possibly only
   formally port v3channel, and formally descope pvIOC from EPICS V4?! (DZ)

7. Performance measurements - not finished. Transferred to new project for micro benchmarking  (MS)

8. ArchiveService. Code complete - but no user guide (DH)

9. exampleJava. Not finished. Needs regularization of serviceAPI and release (GW)

10. Create and release announce beta 2. Depends on 9. (GW)

11. Normative Types. Not finished. Waiting for comments from Michael prior to 1PWD (MD, GW)

12. Javadoc and Doxygen incomplete. Needs much better completeness. Needs to conform
    to much stricter code documentation standards w.r.t. careful use of tense and
    specificity (MK, MS, GW, DH to do Doxygen for CPP modules?)

13. Code comments in pv core modules (MK, MS)

14. Remove ALL warnings from all compiles of pv core code, java and c++. We have 100s
    (MK, MS)

15. Documentation. 
    
    a. pvData and pvIOC documents need significant editing to improve readability. Eg,
    define and provide references for "top level structure", "introspection
    interface", "channel", "record" etc. Must much better distinguish references to
    V3 items and disambiguate such terms, e.g. use of the term "channel access"
    sometimes to refer to the generic control protocol, and sometimes to refer to
    "Jeff Hill's" Channel Access. Make use of uppercase, quotes, italics
    consistently. (MK).

    b. Need a table on the homepage showing the completion status of each thing we're
    doing. (GW)

16. eget/pvget. 

    a. Add demo of acquisition of unsigned (byte for simplicity) from V3
    channel. (MS)
    b. Add full support of NTURI. (MS) 
       i.    Basic regular broadcast acquisition, eg eget pva:///quad45:bdes
       ii.   Registry based name acquisition, eg eget pva://psihost.psi.ch/quad45:bdes
       iii.  Service support; ie, use of query part of NTURI. Eg
             eget pva:///testNTMatrix?columns=3&rows=5 to do equivalent of 
             eget -a columns=3 -a rows=5 -s testNTMatrix
    c. Add mechanism at pvAccess API client side for a client user to choose the
       so-called "provider" of the data, presently planned to be either pvaccess, or
       ca. (MS) 

17. ChannelRPC should be made "asynchronous", or "multithreaded" (what CORBA call
    threaded).That is, more than one client may access at a time.
 

PROPOSED NEW ACTIVITIES
-----------------------
1. Rewrite the C++ implementation of PVValueArray as a C++ STL container,
rather than as now emulating the Java implementation, at least for large arrays.

DATA, APPLICATIONS AND CLIENTS
------------------------------

1. Model service. Not finished. Needs connection to SwissFEL injector, track extant
   machine, GUI. GW
 
2. Unit Conversion - GS, NM, Paul Chu 

3. Orbit Server – TK

4. Test Image service. Intended to help provide test data for development and tuning
   the V4 IOC (2012-13 charter). Started Nov/2012. DH


PERIPHERY ACTIVITIES 
====================
The following are known activities we're tracking but are not in the scope of EPICS
V4.

1. caQtDM. caQtDM is a "synoptic display manager" being used for generating the
   controls UI "screens" for PSI SLS and SwissFEL. Anton Mezger, [1]

2. pyQt apps   - Lingyun Yang, GS

3 PVManager connection to PVAccess. Matej Sekoranja is implementing the vtype "type
  adapter" that will enable one to connect EPICS V4 Normative Types to pvManager
  displays.

4. OLog connection – Kunal Shroff 

5. "ArchiveAppliance" expand for V4 types. Work demoed by Murali. 


OUT OF SCOPE BUT WE'D LOVE IF SOMEONE DID
=========================================
1. Write a pva scheme plugin for a web browser, so one could do pva scheme
   acquisitions directly from a web browser. egs pva:///quad45:bdes,
   pva:///testNTMatrix?columns=3&rows=5.

2. HDF5 serialization of pvData Structures, so one could write EPICS V4 data directly
   to an HDF5 filesystem without intermediate layers. 


References
==========
[1] caQtDM, http://epics.web.psi.ch/software/caqtdm/
