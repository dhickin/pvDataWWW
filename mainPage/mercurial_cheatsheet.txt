MERCURIAL CHEATSHEET FOR EPICS V4
=================================

This is a EPICS v4 development note on using command line Mercurial (hg) command 
line commands for EPICS V4 development.

Auth: Greg White, 29-Sep-2011.
Status: Presently only includes notes on how to use Mercurial
for interfacing to the epics-pvdata software repository.
Mod: 19-Dec-2011. Greg. Removed duplicate hg add help, and some typos.
     12-Jan-2012. Greg. Added tag stuff from Symlab (thanks whoever wrote that!)

Tutorials on Mercurial
----------------------
http://hginit.com/
http://mercurial.selenic.com/wiki/Tutorial
http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html
http://www.symlab.org/wiki/index.php/Using_Mercurial_Tags

Installation
------------
Installing Mercurial
See http://mercurial.selenic.com/wiki/TutorialInstall

Download Mercurial for Mac from http://mercurial.selenic.com/downloads/
Run the installer.

The mercurial command line should now be in the path (of a new 
terminal process - i.e. after install, you'll need the start a new terminal).

[pcp044184:~] greg% hg
Mercurial Distributed SCM

basic commands:

 add        add the specified files on the next commit
 annotate   show changeset information by line for each file
 clone      make a copy of an existing repository
 commit     commit the specified files or all outstanding changes
 diff       diff repository (or selected files)
 export     dump the header and diffs for one or more changesets
 forget     forget the specified files on the next commit
 init       create a new repository in the given directory
 log        show revision history of entire repository or files
 merge      merge working directory with another revision
 pull       pull changes from the specified source
 push       push changes to the specified destination
 remove     remove the specified files on the next commit
 serve      start stand-alone webserver
 status     show changed files in the working directory
 summary    summarize working directory state
 update     update working directory (or switch revisions)

use "hg help" for the full list of commands or "hg -v" for details
[pcp044184:~] greg% 

You might like the GUI macHg available at http://jasonfharris.com/machg/

Man pages: After installation on a Mac, the man pages are available.
e.g.: 
$ man hg


Create your local Mercurial "repo" for your EPICS V4 work
--------------------------------------------------------- 
Having installed mercurial (hg command), create a Mercurial
"repository" for your EPICS V4 work. This is equivalent to a CVS 
development checkout area.

Ref: http://mercurial.selenic.com/wiki/TutorialInit

Eg:
% pwd
/Users/greg
% cd Development/epicsV4/
% mkdir repo
% cd repo
% hg init   <- this creates a .hg file


Download SOURCE EPICSv4 from epics-pvdata into your local repo
-------------------------------------------------------
Ref: http://mercurial.selenic.com/wiki/TutorialClone

To download the source using Mercurial, use an "hg clone".

Eg. Download the 4 core EPICS v4 modules' Java implementations:
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvDataJava
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvAccessJava
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvIOCJava
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/common

Additionally, you may need the web pages, scripts, examples, or "alpha" level software.
Eg, to download the web pages subtree (the directory system headed by pvDataWWW):

hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvDataWWW
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvServiceJava
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/exampleJava
hg clone ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/alpha


When completed, you should have:
[gregsmac:~/Development/epicsV4/repo] greg% ls -l
total 16
 0 drwxr-xr-x   9 greg  staff   306  7 Nov 14:41 ./
 0 drwxr-xr-x  13 greg  staff   442  4 Nov 17:11 ../
 0 drwxr-xr-x  19 greg  staff   646  7 Nov 14:39 pvAccessJava/
 0 drwxr-xr-x  12 greg  staff   408  7 Nov 14:37 pvDataJava/
 0 drwxr-xr-x   6 greg  staff   204  3 Nov 17:20 pvDataWWW/
 0 drwxr-xr-x  24 greg  staff   816  7 Nov 14:40 pvIOCJava/
 0 drwxr-xr-x  16 greg  staff   544  7 Nov 14:41 pvServiceJava/


NOTE: The hg http URIs don't work for many users, since the non-standard 8000 port is blocked
for HTTP by many institutions. Use the ssh one above.


Add Files to your local repository 
==================================
Analogous to cvs add.

Add a file
----------
Use hg add <filename>
E.g.:
% hg add charter_14092011.html
[pcp044184:repo/pvDataWWW/mainPage] greg% hg add charter_15092011.html

Add a directory
---------------
Done with hg add

To add a directory with files in it, just add the directory. Directories and files beneath will be added:
E.g.:
% hg add talks
adding talks/.DS_Store
adding talks/2010/gabriele_PVManager.pptx
adding talks/2011/.DS_Store
adding talks/2011/bob_V4EPICS201109.pptx
adding talks/2011/marty_pvDataEtc.ppt

Update your repo with changes made in source-forge:
===================================================
1. Pull changes made in SF down to your repo, done with hg pull.
%  hg pull ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvDataWWW

2. Then, to give yourself access to these changes, run hg update 
% hg update

Get status of your local repository
-----------------------------------
Analogous to cvs status

Use hg st
E.g.:
% hg st
M mainPage/charter.html
A mainPage/charter_14092011.html
A mainPage/charter_15092011.html


Put your changes back into epics-pvdata in sourceforge
------------------------------------------------------
This is different in idea to the way CVS does it; in particular the
commit command of hg is different to the commit command of 
CVS. In hg, commit makes the *local* repository "database" updated with changes
you made to files. Only after you have committed to your own repository,
can you update the remote repository. You do the remote update
with the hg "push" command. 

So, assuming you've changed some files and/or added some,
putting them in epics-pvdata at sourceforge is now a 3 stage process:

0. hg update

    If you don't hg update first, and someone has changed remote repo files, then your
    push will run into difficulties requiring a merge, even if no files are in common
    between what you changed and what they changed. So, always a good idea.
 
1. hg commit -u gregorywhite@slac.stanford.edu

    ** You'll be dropped into an editor - vi by default, so if you don't know the vi voodoo, beware **
   Hint - hit "i" to enter insert mode, to actually type something
     - hit "ESC : w q" to write and quit.
   To make this easier:
   i) Create a ~/.hgrc file with a username entry, like:
       [gregsmac:repo/pvDataWWW/mainPage] greg% cat ~/.hgrc
       # This is a Mercurial configuration file.
       [ui]
       username = Gregory White <greg@slac.stanford.edu>
   ii) use -m to put the commit message on the command line. Eg
       hg commit -m "add talks"

2. hg push

   Output should look something like:
   pushing to ssh://gregorywhite@epics-pvdata.hg.sourceforge.net/hgroot/epics-pvdata/pvDataWWW
   searching for changes
   remote: adding changesets
   remote: adding manifests
   remote: adding file changes
   remote: added 1 changesets with 5 changes to 5 files
   remote: Running changegroup hook

TROUBLESHOOTING
---------------
* When you attemp hg push, you get, eg 
--
abort: push creates new remote heads!
(did you forget to merge? use push -f to force)
--
Solution is described in http://wiki.geeklog.net/index.php/Using_Mercurial "Merging".

Basically *Don't try to push newly added files while you still have uncommited
changes lying around (or you will end up with the above).*


Mercurial Configuration (.hgrc in your home directory)
======================================================

Add a new diff tool:

[extensions]
extdiff=

[extdiff]
# add new command called kdiff, runs kdiff3 
cmd.kdiff = kdiff3

When you do a "hg pull" it will show all the files that will be changed when you do an "hg update":

[hooks]
changegroup=hg diff --stat -r $HG_NODE -r tip

Add a new alias to commit everything except configure/RELEASE and configure/CONFIG_SITE 
(not recommended, use RELEASE.local instead):

[alias]
cmt = commit -X configure/RELEASE -X configure/CONFIG_SITE

Tags
====
[** The text below is from an excellent writeup on tags at Symlab
http://www.symlab.org/wiki/index.php/Using_Mercurial_Tags **]

Using Mercurial Tags
Mercurial (Hg) tags provide a way of giving a meaningful textual identifier to a
specific changeset. As such, Hg tags identify a specific revision of the repository.

Mercurial supports two types of tags â€“ local and global.

Local Tags
----------
Local tags are stored in the .hg/localtags file (which is not part of the managed
repository and is not replicated).

As local tags are not propagated with a clone, push or pull operation, developers are
free to use them for whatever purpose they would like.

Having said that they are not propagated, they are still visible in remote
repositories, which is useful when sharing changes within a development team. For
example, Alice can create a local tag "For-Bill", and Bill can pull from that tag to
his own repository, even though the tag itself will not then appear in Bill's
repository. Bill can re-tag it locally ("From-Alice") if he thinks that might be
useful.

Global Tags 
----------- 

Global tags are stored in a file called .hgtags, which is a version-controlled file
within the repository. Like all other version controlled files, this will be
replicated when the repository is cloned and all changes to this file (for example,
moving a tag to a different changeset) will appear as changes in the repository
history.  Creating a global tag creates a new commit (because you are updating a
controlled file).  Because the tags are controlled by a version controlled file, if
you have only cloned a part of a repository, you will only be able to see the tags
that are created by changesets in the part you have cloned.  

As a particular example, if you clone from a repository, and use the -r flag with a
tag name, then you will receive the history from that repository up to the tagged
revision, but you won't recive the changeset that defines the tag. CONSEQUENTLY, IN
YOUR CLONE THE TAG WILL NOT APPEAR.  As global tags would be propagated if the work
were pushed to the master repository, they should be generally avoided,
unless by prior agreement from the EPICS V4 team.

Tags used by EPICS V4
Global tags are used in EPICS V4 to label builds and releases. We use a standard 
format for tagging releases and builds, conformant to the Maven common practice. 
See the "EPICS V4 Versioned Release Guide"
http://epics-pvdata.sourceforge.net/release.html 
for more details.

Working with Tags
Tag names can be used in many mercurial commands: wherever a revision can be
supplied. Such commands include clone, push, pull, and update, but this is not an exclusive list.

For example
hg update 1.0-BETA
will update to the source used to release a particular repo such as pvDataJava.

In addition, there are two commands specifically for managing tags.
hg tags -v
will list the tags present in this copy of the repository

hg tag -l <TagName>
will create a local tag on the current revision

hg tag <TagName>
will create a global tag on the current revision (but please note the consequences above)

hg tag [-l] -r <REV> <TagName>
will create a tag on another revision

Note that when you create a global tag Mercurial will automatically commit it (but no
other 
files in your working directory) with a standard message. Superusers can use the more 
advanced tag options to control this and other details of the commit.

Tags can also be managed via GUI tools.
For more about working with tags, you may wish to read the Mercurial documentation

